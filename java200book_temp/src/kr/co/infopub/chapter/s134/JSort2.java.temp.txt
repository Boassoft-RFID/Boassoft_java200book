00QLPGNVH:1: 	package kr.co.infopub.chapter.s134;
00MBRSPCC:2: 	
00UIZAJPG:3: 	public class JSort2 {
00RBYGWTK:4: 		
00PDBTWTU:5: 		/**
00VIENOEV:6: 		 * 
00XIZMUFN:7: 		 * <pre>
00FNTCWEI:8: 		 * BubbleSort : 바로 앞의 배열값과 자신의 배열값을 비교하여 자신이 더 작은 수인 경우 자리를 바꾸어 준다. 
00TZJPXYG:9: 		 * 					그리하여 배열 길이만큼 1회전하면 제일 마지막 배열값은 제일 큰 수가 된다. 
0FYLJJDX:10: 		 * 					그 다음 제일 큰 수가 된 마지막 배열자리만 제외하고 다시 자리를 바꾸어 주는 작업을 해 준다.
0MOEDYZK:11: 		 * 					배열 길이만큼 회전하면 정렬이 완료된다. </pre>
0SMPGVGG:12: 		 */
0WRBLROJ:13: 		public static void BubbleSort(int[] n){
0TRPETLB:14: 			for(int i=0; i<n.length-1; i++){
0RJDCCXK:15: 				for(int j=0; j<n.length-1-i; j++){
0XRYPKXO:16: 					if(n[j]>n[j+1]){
0BMNXLKI:17: 						int temp=n[j];
0SFUDZVH:18: 						n[j]=n[j+1];
0NHQBULZ:19: 						n[j+1]=temp;
0WVEAWKF:20: 					}
0GYJCWVE:21: 				}
0PKNLVAN:22: 			}
0YWALKIB:23: 		}//버블정렬
0LZPURMB:24: 		/** 
0CYORFFK:25: 		 * <pre>
0LLEUVBT:26: 		 * InsertSort : 정렬이 정상적으로 되어있는지 확인해 보다가 증가순 정렬에 위배되는경우 
0ZVUVRYM:27: 		 * 				  다른 곳에 임시 저장한다. 그리고 그 위배되던 자리가 비면, 위배되는 자리의 앞 수들을 한 칸씩
0NJGWYOF:28: 		 * 				  뒤로 이동하여 빈 공간을 없앤다. 그렇게 제일 앞 자리 자리가 비면 임시 저장해 두었던 수를 대입한다.
0FLHCFKW:29: 		 * 				  이런 방법으로 반복하면 정렬이 된다.</pre>
0MIODXMG:30: 		 */
0YBZDHET:31: 		public static void InsertSort(int[] n){	
0RMFYHAC:32: 			for (int i = 0; i < n.length; i++) {
0WHDAWCO:33: 				int temp=n[i];
0YPYIHNL:34: 				int j=i-1;
0QXDTFPC:35: 				while(j>=0 && n[j]> temp){					//왼쪽 수가 더 클 동안 앞의 값을 바로 뒤의 위치에 넣어 준다.
0PQQTSAE:36: 					n[j+1]=n[j];
0EHFOCTI:37: 					j--;
0NTEVVRW:38: 				}
0JOCRZBF:39: 				n[j+1]=temp;
0UHSYELG:40: 			}
0CBYWDAI:41: 		
0HENPKQD:42: 		}//삽입정렬
0IHRCVQC:43: 		
0FFBSDZV:44: 		
0GWVHKAS:45: 		
0KOMUKOL:46: 		/**
0UNCZCYB:47: 		 * <pre>
0WYMDOHZ:48: 		 * SelectSort : 배열의 길이만큼 회전하면서 제일 작은값을 유출해 내고 그 값을 제일 앞자리의 값과 교체해 준다.
0SXJWKCP:49: 		 * 				   다시 나머지 중에서 최소값을 구해내어 나머지의 왼쪽으로 보낸다. 
0BVEOOUQ:50: 		 * </pre>
0QLFOMTB:51: 		 */
0TNBRCGS:52: 		public static void SelectSort(int n[]){
0PRRFAWH:53: 			
0UVDUKJP:54: 			
0TARSTDC:55: 			for (int i = 0; i < n.length; i++) {
0UIVCJDX:56: 				int k = i;
0VEJGEOZ:57: 				for(int j = i+1;j<n.length;j++){
0ESJSOZP:58: 					 if(n[j] < n[k]){
0AHBIFUJ:59: 						 k = j;
0SFEJLYI:60: 					 }
0OYGIYNK:61: 					 
0SWRPUVV:62: 				}
0SWTRNOH:63: 				int temp=n[i];
0FHXJSUM:64: 				n[i]=n[k];
0FJSQEZR:65: 				n[k]=temp;	
0DXVYZZM:66: 				
0FXNTJRP:67: 			}	
0GOACHDS:68: 			
0EOIGRTE:69: 		}
0KZXDZAL:70: 		//셀렉 정렬 끝
0IBEZQKR:71: 		
0TFSBCQM:72: 		/**
0FMVMLGG:73: 		 * <pre>
0HLCCUTS:74: 		 * QuickSort : 배열의 길이의 중간 부분을 pivot으로 설정하고 기준보다 작으면 왼쪽으로, 크면 오른쪽으로 옮긴다.
0TNHLIEJ:75: 		 * 				  이 작업이 완료되면 또 그 나뉜 부분의 중간 부분을 기준으로 정하고 
0BPLWTGS:76: 		 * 				  작으면 왼쪽으로 , 크면 오른쪽으로 옮기는 작업을 반복한다.
0XMLEWPN:77: 		 * </pre>
0HKCWRUR:78: 		 */
0NXYESEV:79: 	
0TFIIARL:80: 		
0HBPTVAY:81: 			public static void QuickSort(int[] nn, int start, int end){
0DSGYYZO:82: 				int left =start; 
0ORKWYUQ:83: 				int right=end;
0XIXNDZI:84: 				int mid=nn[(start+end)/2];
0PCHBNXQ:85: 				do{
0PVHMGZN:86: 						//A
0MKKARWE:87: 					while((nn[left]<mid) && (left < end)){
0ZTSZAQA:88: 						left++;
0WHFLTVQ:89: 						
0NTYSCZJ:90: 					}
0ITNTOYB:91: 					while((mid<nn[right]) && (right>start)){
0ZRHPVKZ:92: 						right--;
0RLRUQEH:93: 					}
0NFQGBXG:94: 						//B
0XBDJZVL:95: 					if(left<=right){
0LMFTSDC:96: 						
0EVDNXIC:97: 						int temp=nn[left];			
0KTZTITM:98: 						nn[left]=nn[right];
0SVLAJQW:99: 						nn[right]=temp;
HQQQIYI:100: 						left++;
DJABAUJ:101: 						right--;
VDIEWYM:102: 					}
HMPMQOI:103: 				}while(left<right);
YVRUMMM:104: 				//C
IYLJPPT:105: 				if(start<right){
BINIRUB:106: 					QuickSort(nn,start,right);
XJFVCZP:107: 				}
UOXVKTL:108: 				//D
QBDAYWR:109: 				if(left<end){
ZMYJZCG:110: 					QuickSort(nn,left,end);
CFWVZSY:111: 				}
KKEPRIO:112: 			}
CWOIKWB:113: 			/**
QFRBBQT:114: 			 * 처음 QuickSort를 입력받아서 배열의 길이 값까지 매개변수로 넘겨주는 작업을 실행한다.  
LBEURGX:115: 			 */
VZEWSMW:116: 			public static void QuickSort(int[] n){
ZWAOOOQ:117: 				QuickSort(n,0,n.length-1);
NNLUHMB:118: 			}
GXOJZDH:119: 				
LHASCNS:120: 		
ZFAGBBE:121: 			
DJUAGMG:122: 		
YPCCWKZ:123: 		/**
CVSDVUY:124: 		 * <pre>
FJKPXNK:125: 		 * 버블 정렬
YTCWGRG:126: 		 * static 메소드로 객체 생성없이 ClassName.MethodName으로 사용할 수 있다. </br>
CFEOVTQ:127: 		 * 변수 count에 배열 길이 -1 를 대입 (인덱스 번호는 0부터 시작하기 때문에.) 
NWHFGJD:128: 		 * 중복 for문을 이용해 outer for문은 0~ 배열 끝까지 정렬이 될때까지 반복되게 한다.
PSIGIMJ:129: 		 * Inner For문은 0~배열 끝 - 1 -i 까지 반복하여 가장 큰 값을 가장 오른쪽으로 이동시키고, 그 다음 결과는 
ZSGMHRQ:130: 		 * 가장 오른쪽 - 1 에 위치시키기 위함이다.
IJQXZLG:131: 		 * if 문으로 조건을 주어 (첫번째 숫자와 두번째 숫자를 비교) 큰 값을 빈 공간에 잠시 넣고, 작은 값을 왼쪽으로
ACRLLOW:132: 		 * 큰값을 오른쪽으로 이동시키는 swap 과정의 반복이 일어나게 된다.
WSNRIXZ:133: 		 *   </pre>
EJHMUZH:134: 		 * @param n  = 정렬하고 싶을 숫자 (int형 배열)
EOAMZFQ:135: 		 */
DYJJUXY:136: 		public static void ascSort(int [] n){
GUGBICS:137: 			int count = n.length;
XMXELEX:138: 			for(int i=0;i<count-1;i++){
GJMKQHQ:139: 				for(int j=0;j<count-1-i;j++){
CWVFHIU:140: 					if(n[j] > n[j+1]){
HIDGPEV:141: 						int temp = n[j];
PRFFNRV:142: 						n[j] = n[j+1];
RGJUTGO:143: 						n[j+1]=temp;
QXDTYON:144: 					}
SPKFMFF:145: 				}
ZNCZUAU:146: 			}
SCLILRL:147: 		}
KGTOAHH:148: 		
HZRXOQM:149: 		/**
PRENFVS:150: 		 * 
PDWTAJO:151: 		 *  파라미터로 입력된 임의의 숫자들(int 형 배열 n)
ATKXDXV:152: 		 *  을 인덱스 번호대로 (0~ n의 갯수까지) 출력하는 메소드.
OTAEAFE:153: 		 * @param n 결과를 출력하고자 하는 인트 배열 (int 배열 형태)
EIGRXRO:154: 		 */
HTUOJBX:155: 		public static void print(int []n){
HEJEJDQ:156: 			for(int i=0;i<n.length;i++){
HSNJMGJ:157: 				System.out.print(n[i]+" ");
HXSJBNG:158: 			}
HTDKQLS:159: 			System.out.println();
KAUZWQA:160: 		}	
MVSEMNN:161: 	
HLLIMTH:162: 	}
