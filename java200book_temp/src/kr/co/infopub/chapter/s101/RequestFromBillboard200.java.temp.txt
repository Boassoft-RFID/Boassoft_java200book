00KIOHXIO:1: 	package kr.co.infopub.chapter.s101;
00PUTFMCV:2: 	import java.io.IOException;
00OFYASZN:3: 	import java.util.ArrayList;
00RRXCMAL:4: 	import org.apache.http.HttpEntity;
00CSQRVGJ:5: 	import org.apache.http.client.methods.CloseableHttpResponse;
00TZYDJCE:6: 	import org.apache.http.client.methods.HttpGet;
00JGMKBNB:7: 	import org.apache.http.impl.client.CloseableHttpClient;
00AUEELRA:8: 	import org.apache.http.impl.client.HttpClients;
00CGJDMHQ:9: 	import org.apache.http.util.EntityUtils;
0YABQQWR:10: 	import org.jsoup.Jsoup;
0XYXIHHC:11: 	import org.jsoup.nodes.Document;
0TGEDWTY:12: 	import org.jsoup.nodes.Element;
0BGYLFWG:13: 	import org.jsoup.select.Elements;
0OQNEJNB:14: 	
0ZLBIJFO:15: 	public class RequestFromBillboard200 {
0IBOFASU:16: 	
0SNZGQRW:17: 		ArrayList<Billbaord> billboards=new ArrayList<Billbaord>();
0YXJYSQD:18: 		
0ITQLBDG:19: 		public ArrayList<Billbaord> getBillboards() {
0OMHKLDT:20: 			return billboards;
0AGTLBBY:21: 		}
0ABMKKQE:22: 		public RequestFromBillboard200(){
0JRJILAY:23: 			billboards.clear();
0ZODJRDP:24: 		}
0WNLRGOM:25: 		public  void getBillboardData(String newUrls){
0YXHKXWJ:26: 		billboards.clear();
0UYINCJJ:27: 		HttpGet request = new HttpGet(newUrls);  // HttpGet 생성
0HCOHZPF:28: 		Document doc = null;  
0AEDMEXM:29: 	    // 자동 finally 처리용 
0WYWJNFU:30: 	    try (CloseableHttpClient httpClient = HttpClients.createDefault(); 
0TWWKOOD:31: 	   	  CloseableHttpResponse response = httpClient.execute(request)){
0CVPTRBA:32: 	    	StringBuffer sb=new StringBuffer();
0NLJXNWY:33: 	        HttpEntity entity = response.getEntity();
0GDNRWZL:34: 	        if (entity != null) {
0ZRZPXOO:35: 	            String result = EntityUtils.toString(entity);
0BZUBLMH:36: 	            sb.append(result);                // 모든 내용을 읽어온다.
0SWGKGJL:37: 	        }
0FNHVNII:38: 	        doc=Jsoup.parse(sb.toString());      // 읽은 내용을 Document로 만든다.
0NCYPEBV:39: 	
0VLNCHVE:40: 	        String r1="flex--column.flex--xy-center.";
0GBXOYME:41: 	        String r2="flex--no-shrink > span.chart-element__rank__number";
0WMFTGBL:42: 	        String o1="span.chart-element__information__song.";
0NMSCPAJ:43: 	        String o2="text--truncate.color--primary";
0MGICAUN:44: 	        String i1="span.chart-element__information__artist.";
0YRCYWQG:45: 	        String i2="text--truncate.color--secondary";
0WAIPFXJ:46: 	        String rank="li > button > span.chart-element__rank."+r1+r2;
0XKUZVGA:47: 	        String song="li > button > span.chart-element__information > "+o1+o2;
0XQJNMSK:48: 	        String singer="li > button > span.chart-element__information > "+i1+i2;
0AVDTHCO:49: 	        //String image="li > button > span.chart-element__image.flex--no-shrink";
0XHJZLXA:50: 	        Elements ranks = doc.select(rank);     // 랭킹 : 모든 내용에서 랭킹 찾기
0GBVUSNR:51: 	        Elements songs = doc.select(song);     // 노래 : 모든 내용에서 노래  찾기
0WFFXPCR:52: 	        Elements singers = doc.select(singer); // 가수 : 모든 내용에서 가수 찾기
0BQRJIDP:53: 	        //Elements images = doc.select(image); // 이미지 : 모든 내용에서 이미지 찾기
0SKGJKMQ:54: 	        // 빌보드 객체에 랭킹, 노래, 가수를 저장, 빌보드 객체를 List에 저장
0XMRWTNN:55: 	        for (int i = 0; i < ranks.size(); i++) {
0AMTCLHP:56: 	        	Billbaord board=new Billbaord();
0YEPZLQH:57: 	        	board.setRank(Integer.parseInt(ranks.get(i).text()));
0CCDAWTP:58: 	        	board.setSong(songs.get(i).text());
0JGBEOQV:59: 	        	board.setArtist(singers.get(i).text());
0VTJYKBC:60: 	/*          String ss=images.get(i).attr("style");
0GFCARPZ:61: 	        	if(ss!=null && !ss.trim().equals("") && ss.indexOf("https")!=-1) {
0HZDAOBX:62: 	        		ss=ss.substring(ss.indexOf("https"));
0QROYAGF:63: 	        		ss=ss.substring(0,ss.length()-3);
0DFXCATV:64: 	        	}
0TPEWUTV:65: 	        	board.setImagesrc(ss);*/
0KPHLNTI:66: 	        	billboards.add(board);   // 빌보드 객체를 List에 저장
0NPNMDZF:67: 			}
0UFMPLVQ:68: 	    } catch (IOException e) {
0RSZVYBG:69: 			System.out.println("Billboard Parsing error !!! ");
0QYNSISJ:70: 		}
0QVZQFLC:71: 	 }
0HOFNFKA:72: 	 public void printBillboard(){
0AILJEJV:73: 		for (Billbaord ss : billboards) {
0DGDELBK:74: 			System.out.println(ss);
0KSPJXBL:75: 		}
0SJVZLIH:76: 	 }
0SCINBFA:77: 	 public String getTimeDate(String newUrls) {  //s091에서 설명
0WHBBOGF:78: 	     HttpGet request = new HttpGet(newUrls); // HttpClient를 이용하여
0JPDYJRM:79: 	     CloseableHttpClient httpClient=null;
0XKALQRU:80: 	     CloseableHttpResponse response=null;
0TXLSHGB:81: 	     Document doc = null;  
0UDRYBFY:82: 	     String sdate="";
0YHJAPNG:83: 	     try {
0LUUHESU:84: 	     	 httpClient = HttpClients.createDefault(); // 웹에 연결
0TSZYYOX:85: 	     	 response = httpClient.execute(request);   // 결과 얻기
0JDJYXPC:86: 	     	 StringBuffer sb=new StringBuffer();       // 5000줄정도 저장
0VYENRKN:87: 	         HttpEntity entity = response.getEntity(); 
0LGQMXDP:88: 	         if (entity != null) {  // 결과가 있다면 결과에서 한줄씩
0WFVEBMA:89: 	             String result = EntityUtils.toString(entity); 
0QLDLEDV:90: 	             sb.append(result); // 한줄씩 저장
0KKXUTQW:91: 	         }
0SNFZSZC:92: 	         doc=Jsoup.parse(sb.toString()); // 전체 내용을 HTML 파싱
0NEJNUGZ:93: 	         String id="charts";  
0KIKMKEC:94: 	         // <div id="charts" data-chart-date="2020-07-11"
0QVWHPMM:95: 	         Element eid=doc.getElementById(id);    // 고유한 charts를 찾음
0TWSZODU:96: 	         sdate=eid.attr("data-chart-date"); // 속성 값 
0OSXMJBD:97: 	     } catch (IOException e) {
0LUUYYAL:98: 	 		 System.out.println("Billboard Parsing error !!! ");
0PUFQMGZ:99: 		 }		
BAFSGHT:100: 	     return sdate!=null?
TYULOQQ:101: 	    			RestDay.saturday(sdate): RestDay.saturday();
ARSTZZL:102: 	 }
KSJTOCP:103: 	/* public static void main(String[] args) {
TXWZKTS:104: 		RequestFromBillboard200 rfw=new RequestFromBillboard200();
XQGWKZW:105: 		String a="https://www.billboard.com/charts/billboard-200/";
RAAGLOB:106: 		String rs=rfw.getTimeDate(a);
QHNBOTC:107: 		System.out.println("이번 주 "+rs);
DASZGHD:108: 		//rs=RestDay.toWantedDay(rs, 1);  //1주전
URBDCQZ:109: 		rfw.getBillboardData(a+rs);  // List에 빌보드 객체들을 저장
BQOAZLL:110: 		rfw.printBillboard();       //  List에 저장한 빌보드 객체들 출력
QBNPWDM:111: 	 }*/
XPRGWWY:112: 	}
