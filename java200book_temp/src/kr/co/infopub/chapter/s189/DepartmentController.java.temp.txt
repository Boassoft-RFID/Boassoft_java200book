00MZRGHCB:1: 	package kr.co.infopub.chapter.s189;
00IFXKQUW:2: 	import javafx.beans.value.ObservableValue;
00NKRYVNT:3: 	import javafx.collections.FXCollections;
00RMFFCJG:4: 	import javafx.collections.ObservableList;
00GNLJQRY:5: 	import javafx.event.ActionEvent;
00UEMDCLE:6: 	import javafx.fxml.FXML;
00QDYZTJC:7: 	import javafx.scene.Node;
00CKYNOBA:8: 	import javafx.scene.control.Button;
00YTLMENP:9: 	import javafx.scene.control.Label;
0NLLYQZW:10: 	import javafx.scene.control.TableColumn;
0OXVAZSP:11: 	import javafx.scene.control.TableColumn.CellDataFeatures;
0MPLBJTB:12: 	import javafx.scene.image.Image;
0JRSOCSW:13: 	import javafx.scene.image.ImageView;
0MQMSWLU:14: 	import javafx.scene.layout.BorderPane;
0PNQOQJH:15: 	import javafx.scene.control.TableView;
0AISJNDG:16: 	import javafx.scene.control.TreeItem;
0SRLXJQD:17: 	import javafx.scene.control.TreeView;
0QYLNZBV:18: 	import javafx.util.Callback;
0WKTMTSB:19: 	import kr.co.infopub.chapter.s189.dto.DepConvert;
0YJPGLEB:20: 	import kr.co.infopub.chapter.s189.dto.Department;
0ZPOVWCJ:21: 	import kr.co.infopub.chapter.s189.dto.DepartmentDto;
0TSWWLQF:22: 	import kr.co.infopub.chapter.s189.dto.EmpConvert;
0YUWQORF:23: 	import kr.co.infopub.chapter.s189.dto.Employee;
0UKCAMHC:24: 	import kr.co.infopub.chapter.s189.dto.EmployeeDto;
0GELPQOQ:25: 	import kr.co.infopub.chapter.s189.model.EmployeeDAO;
0AFPARNZ:26: 	import kr.co.infopub.chapter.s189.util.EmpUtil;
0MGMEQZF:27: 	import java.sql.Date;
0LNBPLNI:28: 	import java.sql.SQLException;
0ZFAKTIN:29: 	import java.util.List;
0NYDSTWS:30: 	public class DepartmentController {
0CLPLZAS:31: 	 @FXML
0TKJAFKL:32: 	 private TableView<Employee> employeeTable;
0AGKAVWF:33: 	 @FXML
0ETFKWYE:34: 	 private TableColumn<Employee, Integer>  empIdColumn;
0DYQBZOI:35: 	 @FXML
0YONBTYH:36: 	 private TableColumn<Employee, String>  empNameColumn;
0GCJBDCH:37: 	 @FXML
0GDPXQTZ:38: 	 private TableColumn<Employee, String> empLastNameColumn;
0OGFMKXA:39: 	 @FXML
0FKNOLRP:40: 	 private TableColumn<Employee, String> empEmailColumn;
0PUYSRUD:41: 	 @FXML
0ERXJHUV:42: 	 private TableColumn<Employee, String> empPhoneNumberColumn;
0YPTVJXL:43: 	 @FXML
0PINPWKV:44: 	 private TableColumn<Employee, Date> empHireDateColumn;
0FUGILHG:45: 	 @FXML
0OGQJTEH:46: 	 private Button searchEmpsBtn;
0BSSKIKO:47: 	 @FXML
0EDRCQUL:48: 	 private Label lbhello;
0CMGZPJL:49: 	 @FXML
0NFZUEOP:50: 	 private TreeView tvEmp;
0IVCFFKX:51: 	 @FXML
0ULWHYWS:52: 	 private BorderPane SearchTabBorder;
0PPQZORK:53: 	 @FXML
0LHKHSRR:54: 	 private BorderPane emptvBorder;
0JRDYHMC:55: 	 @FXML
0KZGVTPO:56: 	 private BorderPane UpdateTabBorder;
0ZXHKYKV:57: 	 EmployeeDAO employeeDAO=new EmployeeDAO();  
0KVVFMLF:58: 	 // 트리뷰에 이미지 - 펼침
0WHOBIMB:59: 	 private final Node rootIcon0 = new ImageView(
0OXVHRCI:60: 	    new Image(getClass().getResourceAsStream("image/book0.png"))
0DORDNNI:61: 	 );
0DHNVQGO:62: 	 // 트리뷰에 이미지 - 닫힘
0STUJSPH:63: 	 private final Node rootIcon1 = new ImageView(
0CABAHSZ:64: 		new Image(getClass().getResourceAsStream("image/book1.png"))
0WBQSDPT:65: 	 );
0WJZPAGF:66: 	 @FXML
0JWACPIT:67: 	 public void initialize () {
0WBPXXAL:68: 		loadTreeItems();
0JPBLOZK:69: 		empIdColumn.setCellValueFactory(
0GRZVCZW:70: 				cellData -> cellData.getValue().employeeIdProperty().asObject());
0KHUYZLP:71: 		empNameColumn.setCellValueFactory(
0IWSMJDS:72: 				cellData -> cellData.getValue().firstNameProperty());
0ZJCDJSO:73: 		empLastNameColumn.setCellValueFactory(
0IXSWEWL:74: 				cellData -> cellData.getValue().lastNameProperty());
0EWSCNUA:75: 		empEmailColumn.setCellValueFactory(
0JFYWKMT:76: 				cellData -> cellData.getValue().emailProperty());
0TNHPBDW:77: 		empPhoneNumberColumn.setCellValueFactory(
0VNVRJCX:78: 				cellData -> cellData.getValue().phoneNumberProperty());
0WLYENDL:79: 		empHireDateColumn.setCellValueFactory(
0DCDKATX:80: 				cellData -> cellData.getValue().hireDateProperty());
0KGGBESU:81: 		employeeTable.setOnMouseClicked(e ->{
0SCDRBKB:82: 		  if(employeeTable.getSelectionModel().getSelectedItem()!=null ){
0IVCGEGH:83: 			Employee user = 
0EYPIODE:84: 					(Employee)employeeTable.getSelectionModel().getSelectedItem();
0SVGTDFU:85: 			showLabel(
0HMPNCFC:86: 			   user.getEmployeeId()+"  "+user.getFirstName()+" "+user.getLastName());
0OWOFHFZ:87: 		  }
0MCVJBOJ:88: 		});
0QOLFKIF:89: 	 }
0YXKECJR:90: 	 void showLabel(String msg){
0WUIUDDX:91: 		lbhello.setText(msg);
0IDEPKQQ:92: 		//lbhello.setStyle(null);
0GBEAEIE:93: 		String value=
0RBQNXAF:94: 		   "-fx-font-size: 12px;           "
0UZEZGFG:95: 		   +"-fx-font-family: 'Arial Black';    "
0DVMASKI:96: 		   +"-fx-fill: #818181;                 "
0MKADZJC:97: 		   +"-fx-effect: innershadow( three-pass-box ,"
0EQFITTW:98: 		   +" rgba(0,50,255,0.7) , 6, 0.0 , 0 , 2 );";
0EHGLRUZ:99: 		lbhello.setStyle("\t"+value);
QGBNYVL:100: 	 }
UAXARKF:101: 	 void showViewError(String msg){
ETJZGUL:102: 		lbhello.setText(msg);
UXXZEMQ:103: 		String value=
ZHOVQFS:104: 		   "-fx-font-size: 12px;           "
QVVHWBH:105: 		   +"-fx-font-family: 'Arial Black';    "
HOBAVHZ:106: 		   +"-fx-fill: #818181;                 "
BPZJCGR:107: 		   +"-fx-effect: innershadow( three-pass-box ,"
AMEXCAV:108: 		   +" rgba(255,0,0,0.7) , 6, 0.0 , 0 , 2 );";
NUJRHLV:109: 		lbhello.setStyle("\t"+value);
WEXSCTU:110: 	 }
JEQOZEZ:111: 	 public  void makeDepTree(TreeItem<String> front,List<Department> dlists){
UTPSIYT:112: 		for (Department dep: dlists) {
UNPQAMH:113: 	          TreeItem<String> troots=new TreeItem<String>(EmpUtil.tname(dep));
UTENSVC:114: 	          front.getChildren().add(troots);
YACNCRW:115: 		}
YIZYLCN:116: 	 }
JPYAXBT:117: 	 @SuppressWarnings("unchecked")
POFGOQV:118: 	 public void loadTreeItems() {
QIVHLQF:119: 	    ObservableList<Department> dlists=null;
GEIIZAO:120: 	    TreeItem<String> root = new TreeItem<String>("부서별 직원",rootIcon0);
LHEXBDA:121: 	    root.setExpanded(true);
BVFUDDV:122: 		try {
QVGSBTK:123: 			List<DepartmentDto> blist=employeeDAO.findAllDepartments();
DFICGFH:124: 			dlists=DepConvert.toObservProFromDto(blist);
HPWHPBU:125: 		    makeDepTree(root,dlists);
BHYSYTH:126: 		    tvEmp.setRoot(root);
OAZFJOX:127: 		    // 트리뷰의 아이템을 선택하면 부서에 있는 부서원을 정보를 테이블뷰에 보인다.
QCPEGDV:128: 		    tvEmp.getSelectionModel().selectedItemProperty()
FHTVLLR:129: 		    .addListener((observable, oldValue, newValue) -> {
ARVSZAW:130: 		        ObservableList<Employee> empData=FXCollections.emptyObservableList();
GNLNEDS:131: 			  try {
YUCNTYZ:132: 				 String val="";
GFRMWXC:133: 				 if(newValue !=null && newValue instanceof TreeItem<?>){
VONMGTW:134: 					 // 트리뷰에서 선택된 트리아이템의 부서이름을 가져온다.
XQOHHVH:135: 					 val=EmpUtil.dep(((TreeItem<String>)newValue).getValue());
VPODXZF:136: 				 }
XMHSIZX:137: 				 System.out.println("-----------------------------"+val);
XQLYWWP:138: 				 // 부서이름으로 부서에 근무하는 부서원들을 List로 가져온다.
CKQMOJU:139: 				 List<EmployeeDto> emplists=employeeDAO.findEmployeesByDepartName( val);
TZPMDLP:140: 				 if(!(emplists==null || emplists.size()==0)){
EHHKJYJ:141: 					 empData = EmpConvert.toObservProFromDto(emplists);
WEVSHVW:142: 				 }
EKHNDQZ:143: 				 String stsf=val+" 부서직원수: ";
WZFSVEF:144: 				 showLabel(stsf+empData.size()+" 명");
MMMIXVS:145: 				 // 테이블뷰에 해당 부서의 부서원들의 정보를  보인다.
GPIMCRZ:146: 				 showToTableEmployees(empData);
UMJCVCV:147: 			  } catch (SQLException e) {	
KMUQNXE:148: 			  }
JIWYTSD:149: 		    });
PMJNJCE:150: 		    // 트리뷰의 트리아이템을 펼친다.
JBJSURM:151: 		    root.addEventHandler(TreeItem.branchExpandedEvent(),eh->{
WRUJHUN:152: 		    	System.out.println("expanded");
ACASPYX:153: 		    	root.setGraphic(rootIcon0);
XNQHWJF:154: 		        loadTreeItems();  // 펼쳐질때 아이템에 해당하는 자식 아이템들을 보인다.
RXUPZBK:155: 		    });
WSSBKUY:156: 		    // 트리뷰의 트리아이템을 닫는다.
JUQJULW:157: 		    root.addEventHandler(TreeItem.branchCollapsedEvent(),eh->{
ARLNRIM:158: 		    	System.out.println("collapsed");
WTVIUNW:159: 		    	root.setGraphic(rootIcon1);
CMXRPVQ:160: 		    });
VASYKCS:161: 		} catch (SQLException e) {
AMYJWXF:162: 			System.out.println(" emp tv :"+e);
SBGTCWA:163: 		}
XPEZRQP:164: 	}
YFQRKSG:165: 	 // 모든 사원의 정보를 가져와서 중앙 테이블뷰에 붙인다. 
PYRRCYS:166: 	 @FXML
VKYXRNK:167: 	 private void searchEmployees(ActionEvent actionEvent) throws SQLException {
UHDBHRG:168: 	    try {
IHWTPAW:169: 	    	List<EmployeeDto> blist  = employeeDAO.findAllEmployees ();
CMLNHCW:170: 	    	ObservableList<Employee> empData=EmpConvert.toObservProFromDto(blist);
OOSZPNE:171: 	    	showToTableEmployees(empData);
JXWYRHK:172: 	        showLabel("Employees 총 :"+empData.size()+"(Person)");
CCZBDPY:173: 	    } catch (SQLException e){
PKISMJB:174: 	        System.out.println("employeeDAO.findAllEmployees() Exception\n" + e);
ZXPQYHB:175: 	        //throw e;
IHDDRCK:176: 	    }
IVJHZAV:177: 	 }
ENILGLX:178: 	 // 테이블뷰에 고객의 정보를 아이템즈으로 만들어 붙인다.
DNRCVBK:179: 	 @FXML
BAIHATW:180: 	 private void showToTableEmployees (ObservableList<Employee> empData)  {
RXAIMGO:181: 	    employeeTable.setItems(empData);
RDGKDNO:182: 	 }
WHNLVPV:183: 	}
