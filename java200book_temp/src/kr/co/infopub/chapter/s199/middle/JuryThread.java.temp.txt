00WANEGHF:1: 	package kr.co.infopub.chapter.s199.middle;
00QLAWQIP:2: 	import java.io.*;
00TOCJAGG:3: 	import java.net.*;
00OGFWSMK:4: 	import java.util.*;
00OCKCBJP:5: 	import kr.co.infopub.chapter.s199.common.DepCountDto;
00GIOSGZR:6: 	import kr.co.infopub.chapter.s199.common.DepartmentDto;
00HIZCPKP:7: 	import kr.co.infopub.chapter.s199.common.EmployeeDto;
00IWBRCND:8: 	import kr.co.infopub.chapter.s199.common.HRMRequest;
00WVVMBSO:9: 	import java.sql.*;
0EMCNDOI:10: 	public class JuryThread extends Thread {
0JCYYGIK:11: 	   EmployeeService    activeDB;
0XBNLVOI:12: 	   Socket             talkToMe;
0PXERWGW:13: 	   ObjectOutputStream sendStream;
0UGZKIYJ:14: 	   ObjectInputStream  recvStream;
0MODSXPW:15: 	   boolean            success = true;
0HTBUBCM:16: 	   HRMRequest            command;
0TFCFOJH:17: 	   /*
0MYGZCHY:18: 	   ProtocolHandler로부터 Socket를 넘겨 받아 ObjectOutput, InputStream를 연다.
0FDKXYLH:19: 	   run() 메소드에서는 클라이언트에서 넘겨 주는 HRMRequest객체를 받고 주도록 쓰레드를 start한다.
0YJROIJO:20: 	   */
0RYQRKTP:21: 	   public JuryThread(Socket s, EmployeeService activeDB){
0YOJCJZF:22: 	      talkToMe  = s;
0QRLPLWA:23: 	      System.out.println(talkToMe.getInetAddress()+"이 붙음");
0SCZVGHU:24: 	   this.activeDB  = activeDB;
0ZZHKNTP:25: 	   try{
0CAOOHAC:26: 	     sendStream = new ObjectOutputStream(talkToMe.getOutputStream());
0XDXRPRB:27: 	     recvStream = new ObjectInputStream(talkToMe.getInputStream());
0KHELNBA:28: 	     start();
0PENDYZI:29: 	   }catch(IOException e){ 
0IJDQHUO:30: 	     System.err.println("Error- JuryThread 생성자");
0VRIBXZG:31: 	         success = false;
0PIUFTFR:32: 	         close();
0WQBDOTX:33: 	      }
0EFNWAGB:34: 	   }
0HRVHUQF:35: 	   public void close(){
0LVRZCOT:36: 		   try{
0SDJLBFU:37: 	           if(recvStream!=null )recvStream.close();
0JVDLDVS:38: 	           if(sendStream!=null )sendStream.close();
0HUQRSZZ:39: 	           if(talkToMe!=null )talkToMe.close();
0ZQGJWGR:40: 	        }catch(IOException ioe){ }
0TUPFOMP:41: 	   }
0QRLNVTU:42: 	   /*
0DZAOHJZ:43: 	   run() 메소드에서는 클라이언트에서 넘겨 주는 HRMRequest객체를 받아들여서 
0XWQQWJM:44: 	   상수값으로 표현된 규약를 읽고 switch에서 각각을 판단하며 EmployeeService 객체의 
0PGQWMOG:45: 	   메소드를 호출한다. 그리고 그 메소드에서 발생할 exception을 catch 하면서 status에 
0BUMWDGK:46: 	   -1, -2 등을 설정하면서 다시 클라이언트에 HRMRequest객체를 넘겨준다. 
0AOSUNMK:47: 	   클라이언트에서 넘어온 HRMRequest객체중에 값을 갖고 있는 경우는 직렬화 객체 형태로 넘어
0DVKVZJF:48: 	   오기 때문에 그것을 받아서 메소드의 argument에 넣어주면서 처리하고, 클라이언트로 보낼 경우에는
0PPITZVS:49: 	  HRMRequest 객체에 있는 HRMResponse 객체에 add시키면서 보낸다.
0MDTOYFT:50: 	   */
0JNAUUGQ:51: 	 public void run() {
0FNURVYS:52: 	  while (success) {
0MYKBZDN:53: 	  try {
0LVHQGOI:54: 	    command = (HRMRequest)recvStream.readObject();//먼저 읽고
0NBLSQVB:55: 	  }catch(Exception e) {
0APYAKBO:56: 		close();
0ETKZKDD:57: 		System.err.println ("클라이언트 연결이 끊어짐.......");
0IRDNHGH:58: 	    return;
0JBQVAMO:59: 	  }
0TWFAKRF:60: 	  try{
0KQEFWQD:61: 		System.out.println("5 request 받음, protocol :"+command.getCommandValue());
0WEHILTH:62: 		// HRMRequest에 있는 프로토콜에 대한 판단과 처리를 한다.
0UKMVPLD:63: 		// 클아이언트에서 요청은 프로토콜로 날아온다.
0VJTWHLN:64: 	    switch(command.getCommandValue()){
0OSFJLNE:65: 		 case HRMRequest.findAllDepartments: {       // 2010 요청받음
0VMCHXUP:66: 			// DB에서 사원이 있는 모든 부서 List로 가져온다.
0EUSCMLW:67: 			List<DepartmentDto> cr =  activeDB.findAllDepartments();
0EKCNSSL:68: 			  if(cr.size() <= 0){
0WSMJKAL:69: 				 System.err.println("Error in findAllDepartments"); 
0KKYZYQF:70: 				 command.getResult().setStatus(-1);
0VKGJRTP:71: 			  }else{
0XLQQQWR:72: 				 // 정사적으로 요청을 처리하면 결과를 HRMRequest내부의
0KLYXIKC:73: 				 // HRMResponse객체에 저장한다. HRMResponse는 Vector
0HQUVQHF:74: 				 command.getResult().add(cr);
0PSTANYF:75: 				 command.getResult().setStatus(0);
0ZJUKOJB:76: 			  }
0PCWJKAL:77: 		    } break;
0BPSCZCG:78: 		case HRMRequest.findTreeManagerInEmployee: {
0MLOXVIB:79: 			List<EmployeeDto> cr =  activeDB.findTreeManagerInEmployee();
0EOLJAOQ:80: 			  if(cr.size() <= 0){
0OWTQPDU:81: 				 System.err.println("Error in findTreeManagerInEmployee"); 
0XYHELKJ:82: 				 command.getResult().setStatus(-2);
0XTJUPKP:83: 			  }else{
0BBOZAKY:84: 				 command.getResult().add(cr);
0XSMNMZC:85: 				 command.getResult().setStatus(0);
0YDOJVMX:86: 			  }
0JWVJOPS:87: 		    } break;
0HLPVPWY:88: 		case HRMRequest.findAllEmployees: {
0YMIOUII:89: 			List<EmployeeDto> cr =  activeDB.findAllEmployees();
0RZSRKJO:90: 			  if(cr.size() <= 0){
0XZCNRGY:91: 				 System.err.println("Error in findAllEmployees"); 
0BIJTCMK:92: 				 command.getResult().setStatus(-3);
0WFFQEYA:93: 			  }else{
0AMXHIAU:94: 				 command.getResult().add(cr);
0THTSYVM:95: 				 command.getResult().setStatus(0);
0FUYUCBL:96: 			  }
0JZPOYCV:97: 		    } break;
0MZAECYJ:98: 		case HRMRequest.getTreeMaxLevel: {
0EQCURXW:99: 			int cr =  activeDB.getTreeMaxLevel();
HZUNPGY:100: 			  if(cr <= 0){
FZRDQEY:101: 				 System.err.println("Error in getTreeMaxLevel"); 
BGGLEPV:102: 				 command.getResult().setStatus(-4);
NUQYAFI:103: 			  }else{
ZPZBZKE:104: 				 command.getResult().add(cr);
UXIXSZR:105: 				 command.getResult().setStatus(0);
UCGIJJP:106: 			  }
AOUHWUT:107: 		    } break;
SJVYDOO:108: 		case HRMRequest.findAllDepCounts: {
YMAQPQO:109: 			List<DepCountDto> cr =  activeDB.findAllDepCounts();
TDDAEAX:110: 			  if(cr.size() <= 0){
KFGUAVM:111: 				 System.err.println("Error in findAllDepCounts"); 
YZTDWKS:112: 				 command.getResult().setStatus(-5);
MWXVGRC:113: 			  }else{
DSZGQBU:114: 				 command.getResult().add(cr);
OBSTNRO:115: 				 command.getResult().setStatus(0);
RMLVHNY:116: 			  }
UULVCMX:117: 		    } break;
PFNHZLO:118: 		case HRMRequest.findEmployeesByDepartName: {
LUVVZOG:119: 			String val="";
KVMIKKS:120: 			Serializable objs=command.getRequestObject();
FCOXIHS:121: 			if(objs!=null && objs instanceof String){
PWSWDPC:122: 				val=(String)objs;
DKFGPYO:123: 			}
TKPRWND:124: 			List<EmployeeDto> cr =  activeDB.findEmployeesByDepartName(val);
PXMTERM:125: 			  if(cr.size() <= 0){
VDOPIQL:126: 				 System.err.println("Error in findEmployeesByDepartName"); 
YHHKAKR:127: 				 command.getResult().setStatus(-6);
ZEBRIGM:128: 				 //return;
MYBIDMW:129: 			  }else{
EZTAUTK:130: 				 command.getResult().add(cr);
MEBGLEF:131: 				 command.getResult().setStatus(0);
LJESOGM:132: 			  }
AVSMDKQ:133: 		    } break;
OXWABUW:134: 		case HRMRequest.findEmployeesByEmpId: {
OQWBLPT:135: 			String val="";
WRUCDOU:136: 			Serializable objs=command.getRequestObject();
GAENOLH:137: 			if(objs!=null && objs instanceof String){
DMXQJJH:138: 				val=(String)objs;
NBGALOO:139: 			}
RRYUOMD:140: 			List<EmployeeDto> cr =  activeDB.findEmployeesByEmpId(val);
LZSUMMD:141: 			  if(cr.size() <= 0){
ZMPPGNP:142: 				 System.err.println("Error in findEmployeesByEmpId"); 
UFDDOIV:143: 				 command.getResult().setStatus(-7);
IYHDWKD:144: 				 //return;
FMDRRDI:145: 			  }else{
WQZTUJX:146: 				 command.getResult().add(cr);
XWWSJPY:147: 				 command.getResult().setStatus(0);
XLXEKCD:148: 			  }
JBCFEMI:149: 		    } break;
REIGGJZ:150: 		case HRMRequest.findEmployeeById: {
WBKOBCK:151: 			String val="";
PUJAVNR:152: 			Serializable objs=command.getRequestObject();
YOQZCRQ:153: 			if(objs!=null && objs instanceof String){
MIVPFHJ:154: 				val=(String)objs;
MAFEISR:155: 			}
SXSPAUB:156: 			EmployeeDto cr =  activeDB.findEmployeeById(val);
RUCBRDU:157: 			  if(cr==null){
XVMWVVJ:158: 				 System.err.println("Error in findEmployeeById"); 
NARYDUR:159: 				 command.getResult().setStatus(-8);
DBXYAWC:160: 				 return;
RETBCLL:161: 			  }else{
SKODHSC:162: 				 command.getResult().add(cr);
GRTCVJX:163: 				 command.getResult().setStatus(0);
CLULZGY:164: 			  }
ZSTVLYP:165: 		    } break;
YGUMHZH:166: 		case HRMRequest.findManagersByName: {
VKZFSVJ:167: 			String val="";
BJMQXTH:168: 			Serializable objs=command.getRequestObject();
YGOSJXB:169: 			if(objs!=null && objs instanceof String){
WMJDCRD:170: 				val=(String)objs;
OGVGHJV:171: 			}
YYJDRFX:172: 			List<EmployeeDto> cr =  activeDB.findManagersByName(val);
INICSHE:173: 			  if(cr.size() <= 0){
RFLGHGB:174: 				 System.err.println("Error in findEmployeeById"); 
YBIXFXY:175: 				 command.getResult().setStatus(-9);
KQKMAUA:176: 			  }else{
UMRZMCM:177: 				 command.getResult().add(cr);
CCXDURT:178: 				 command.getResult().setStatus(0);
NFVPVNI:179: 			  }
NAOWKCJ:180: 		    } break;
BYSMFUM:181: 		case HRMRequest.findAllJobs: {
CJFJFAU:182: 			List<String> cr =  activeDB.findAllJobs();
FWYOQZQ:183: 			  if(cr.size() <= 0){
JWSRNOO:184: 				 System.err.println("Error in findAllJobs"); 
MDISKWX:185: 				 command.getResult().setStatus(-10);
UYESTSF:186: 			  }else{
HHLRHZD:187: 				 command.getResult().add(cr);
NHBCZUY:188: 				 command.getResult().setStatus(0);
HTVGJMP:189: 			  }
KKXKICT:190: 		    } break;
KMHZHZH:191: 		case HRMRequest.findAllDepartments2: {
SQCGYOB:192: 			List<DepartmentDto> cr =  activeDB.findAllDepartments2();
NCOSZED:193: 			  if(cr.size() <= 0){
UHWGNUB:194: 				 System.err.println("Error in findAllDepartments2"); 
JJPFSKP:195: 				 command.getResult().setStatus(-11);
TZTYZOF:196: 			  }else{
RFFFMPD:197: 				 command.getResult().add(cr);
RAXSUDS:198: 				 command.getResult().setStatus(0);
MEBXIRA:199: 			  }
KYFIJED:200: 		    } break;
MDHUMTN:201: 		case HRMRequest.addEmployee: {
IJJBEQZ:202: 			EmployeeDto val=null;
MGNMGKN:203: 			Serializable objs=command.getRequestObject();
KQCXTJT:204: 			if(objs!=null && objs instanceof EmployeeDto){
IWYSMCR:205: 				val=(EmployeeDto)objs;
KHPDWPX:206: 			}else{
VWTPWVG:207: 				System.err.println("Error in addEmployee"); 
GSJZHAL:208: 				command.getResult().setStatus(-12);
PHGJYEV:209: 				return;
QPBLPGA:210: 			}
AAODNXZ:211: 			int cr =  activeDB.addEmployee(val);
WWSMMET:212: 			  if(cr==0){
NUMWSWD:213: 				 System.err.println("Error in addEmployee"); 
NUSLMTT:214: 				 command.getResult().setStatus(-13);
CEVLUMW:215: 			  }else{
UQUJIOR:216: 				 command.getResult().add(cr);
RBYEOLC:217: 				 command.getResult().setStatus(0);
NGOXLEM:218: 			  }
AAZWPFQ:219: 		    } break;
OYSSVNQ:220: 		case HRMRequest.updateEmployee: {
XBDXENI:221: 			EmployeeDto val=null;
NTUUWGW:222: 			Serializable objs=command.getRequestObject();
ZPXEOFL:223: 			if(objs!=null && objs instanceof EmployeeDto){
QZBWXQE:224: 				val=(EmployeeDto)objs;
ETAXYBX:225: 			}else{
EMXBZYV:226: 				System.err.println("Error in updateEmployee"); 
BAIAASG:227: 				command.getResult().setStatus(-14);
JCJHRCC:228: 				return;
QNMFREZ:229: 			}
EPOUTXN:230: 			boolean cr =  activeDB.updateEmployee(val);
BUMPZZV:231: 			  if(cr==false){
BJFKEDG:232: 				 System.err.println("Error in updateEmployee"); 
RHMZPNA:233: 				 command.getResult().setStatus(-15);
HJETJQE:234: 			  }else{
OROUBRP:235: 				 command.getResult().add(cr);
KUQHFWY:236: 				 command.getResult().setStatus(0);
WLHWRKA:237: 			  }
MCBSBHC:238: 		    } break;
LUKIUWB:239: 		case HRMRequest.deleteEmployee: {
HSIHDES:240: 			EmployeeDto val=null;
ZPODMRA:241: 			Serializable objs=command.getRequestObject();
GKLXDPQ:242: 			if(objs!=null && objs instanceof EmployeeDto){
AUXRAYO:243: 				val=(EmployeeDto)objs;
BLKKHKY:244: 			}else{
TDRLLXO:245: 				System.err.println("Error in deleteEmployee"); 
VMEXUDP:246: 				command.getResult().setStatus(-16);
YUTMCQP:247: 				return;
HLDLOXI:248: 			}
HZBEQAQ:249: 			boolean cr =  activeDB.deleteEmployee(val);
MBRSGUH:250: 			  if(cr==false){
HKOBIOV:251: 				 System.err.println("Error in deleteEmployee"); 
GJAZFSF:252: 				 command.getResult().setStatus(-17);
UJSFOHY:253: 			  }else{
CIDQUFT:254: 				 command.getResult().add(cr);
OTUVLYK:255: 				 command.getResult().setStatus(0);
CEVZNCE:256: 			  }
YBLVWEF:257: 		    } break;
QBATUGN:258: 		case HRMRequest.getEmployeesTotal: {
NQLYWDD:259: 			int cr =  activeDB.getEmployeesTotal();
UEXJTOY:260: 			  if(cr <= 0){
ZYLFMOB:261: 				 System.err.println("Error in getEmployeesTotal"); 
GFXJJSN:262: 				 command.getResult().setStatus(-18);
DPCNJQS:263: 			  }else{
ZDEAJGP:264: 				 command.getResult().add(cr);
UFNKWBL:265: 				 command.getResult().setStatus(0);
AORWLQL:266: 			  }
GOYWEYB:267: 		    } break;
NZEEJWO:268: 	    default:
TLFUDEA:269: 	       // 잘못된 프로토콜을 받았을 때
GQZRRXJ:270: 	       command.getResult().setStatus(-19);break;
MESGJCI:271: 	    }
ZOHBFHU:272: 	   }catch(Exception e){
ZYJITGM:273: 	      System.err.println ("Error in JuryThread's switch");
IJKZFLE:274: 	      // 그외 JuryThread의 switch 처리하다 발생
BOVKNLQ:275: 	      command.getResult().setStatus(-20);
FIHQNMY:276: 	   }
NFFQYON:277: 	   // 클라이언트 요청를 처리한 결과를 HRMRequest에 담아 클라이언로 재전송
QPHRKMP:278: 	   // 클라이언트로 보내는 HRMRequest에 HRMResponse가 있다 
MPGTOOU:279: 	   // 결국 HRMResponse를 클라이언트로 전송
MILHHAM:280: 	   try {
BRQOZWA:281: 	      sendStream.writeObject(command);
OMUXFLY:282: 	      sendStream.flush();
EPTJLOO:283: 	      System.out.println("6 response 보냄: "+command.getResult().getStatus());
IWLGFTB:284: 	   }catch(Exception e){
FFDWQGY:285: 	      System.err.println("Error in writing response");
EYISFCJ:286: 	   }
EZEEXPF:287: 	   // 다른 JuryThread에게 양보(이 쓰레드는 요청을 끝냈으니)
DFLGRIY:288: 	   // 멀티 client -> 멀티 JuryThread
CMOGJUT:289: 	   Thread.yield(); 
JNANAGL:290: 	  }
MQJVQLG:291: 	 }
QVVSCBC:292: 	}
