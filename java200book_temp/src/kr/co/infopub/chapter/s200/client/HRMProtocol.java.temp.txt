00LVRONNX:1: 	package kr.co.infopub.chapter.s200.client;
00KEKQZPC:2: 	import java.util.*;
00HPVNWSU:3: 	import kr.co.infopub.chapter.s199.common.DepCountDto;
00JHQXXMA:4: 	import kr.co.infopub.chapter.s199.common.DepartmentDto;
00GGMQFIK:5: 	import kr.co.infopub.chapter.s199.common.EmployeeDto;
00NTXJGUB:6: 	import kr.co.infopub.chapter.s199.common.HRMRequest;
00HBHTJZA:7: 	import java.io.*;
00ZFWXVHX:8: 	import java.net.*;
00PCGROAI:9: 	import java.sql.SQLException;
0FHLYJXV:10: 	public class HRMProtocol{
0HQYCHPP:11: 	 private static int         MIDDLE_TIER_PORT = 9983;
0CQKGGRY:12: 	 private HRMRequest         cmndObj;
0SXSBBCO:13: 	 private Socket             handler;
0NZGZOSN:14: 	 private ObjectOutputStream oos;
0BKXGGWL:15: 	 private ObjectInputStream  ois;
0BWTADGX:16: 	 // 생성자로 서버에 연결
0DCVAOGW:17: 	 // 객체 직렬화가 가능한 ObjectOutputStream, ObjectInputStream를 생성
0IXDBRXS:18: 	 public HRMProtocol (String server) throws IOException {
0ADKGWYO:19: 	  try{
0WAWKXTJ:20: 	     handler = new Socket(server, MIDDLE_TIER_PORT);
0SUXTGVQ:21: 	     oos     = new ObjectOutputStream (handler.getOutputStream());
0GCTSJTZ:22: 	     ois     = new ObjectInputStream (handler.getInputStream());
0FINAOHE:23: 	     System.out.println("1 HRMProtocol 소켓과 스트림 생성..."+ new Date());
0FUDBSFX:24: 	  }catch (IOException e) {
0FFGLFVP:25: 	     System.err.println ("Error in HRMProtocol 소켓과 스트림 생성...");
0MAOAFYS:26: 	     throw e;
0IQPXGRR:27: 	  }
0KXDWUNV:28: 	 }
0ZGXTNHA:29: 	 // 열려 있는 Socket를 닫는 메소드
0KRFOQMO:30: 	 public void close() throws IOException {
0RPEKCWL:31: 	   if(oos!=null)oos.close();
0MCFWAYA:32: 	   if(ois!=null)ois.close();
0EHOXANR:33: 	   if(handler!=null)handler.close();
0PVRPGFH:34: 	 }
0SKYEHVD:35: 	 // 서버의 protocol handler로부터 응답을 받음
0UMRJXFB:36: 	 // HRMRequest내부에 HRMResponse가 있다
0CDBWRGG:37: 	 public int getResponse () {
0GNRQHLP:38: 	  try {
0IDTWUMM:39: 	     cmndObj = (HRMRequest)ois.readObject();
0MHBXFSK:40: 	     System.out.println("2 HRMProtocol HRMRequest 받기 ...");
0UEQNWSC:41: 	  }catch(ClassNotFoundException e){
0HHMASEC:42: 	     System.err.println("HRMRequest를 못찾음...");
0TPXJHKD:43: 	  }catch(InvalidClassException e){
0LBSMSPS:44: 	     System.err.println("직렬화가 잘못됨(직렬화,Object Graph 확인)...");
0UVUFXRZ:45: 	  }catch(StreamCorruptedException e){
0KFWTXGB:46: 	     System.err.println("Stream에 이상...");
0NANOAWA:47: 	  }catch(IOException e){
0WRYIRBK:48: 	     System.err.println("IO 예외발생...");
0WMVRQIP:49: 	  }catch(Exception e){
0OFREUMT:50: 	     System.err.println("그 외 예외가 발생함...");
0FYRZLLB:51: 	  }
0HQKOBBD:52: 	  int status = cmndObj.getResult().getStatus();
0UUDUAZT:53: 	  //응답이 음수면 예외 알려 줌
0ELUVMCS:54: 	  if (status < 0) System.err.println ("응답이 음수임..." + status);
0GWWHMYC:55: 	      return (status);
0EOIZNRZ:56: 	 } 
0LUCWWZV:57: 	 // HRMRequest 객체를 미들 서버로 보냄
0APIZQJA:58: 	 private void writeCommand (HRMRequest commandObj) {
0OELLVAG:59: 	  try {        
0TXOFION:60: 	     oos.writeObject (commandObj);
0ANJYLFU:61: 	     oos.flush();
0NLAJEQK:62: 	  }catch(InvalidClassException e){
0WERQGVO:63: 	     System.err.println("잘못된 캐스팅문제: Serializable -> DTO ");
0JZDGXYN:64: 	  }catch(NotSerializableException e){
0DQTBUNE:65: 	     System.err.println("질력화 문제(직렬화, Object Graph)");
0NVDDODH:66: 	  }catch(IOException e){
0OMMATTU:67: 	     System.err.println("Stream 통신문제");
0DTYAQQJ:68: 	  }
0EKOBPVK:69: 	 }
0FFVAYFP:70: 	 // HRMRequest에 요청 프로토콜을 넣고 미들 서버로 보냄
0SUHNVJX:71: 	 public void sendCommand(int command){
0YBLLKYR:72: 	  System.err.println("Sending: " + command);
0PJTSBWM:73: 	  cmndObj = new HRMRequest(command);
0JJDYDOK:74: 	  writeCommand(cmndObj);
0XLGKVSG:75: 	 }
0AZCQLZR:76: 	 // HRMRequest에 요청 프로토콜을 넣고 미들 서버로 보냄, 아규먼트 1개
0SMAFDBQ:77: 	 public void sendCommand(int command, Serializable requestObject){ 
0KOOLOSS:78: 	  System.out.println("Sending: " + command + " " + requestObject);
0YHAYRPR:79: 	  cmndObj = new HRMRequest(command);
0LIAMFZV:80: 	  cmndObj.setRequestObject(requestObject);
0QHOUXGP:81: 	  writeCommand(cmndObj);
0NHWNVMZ:82: 	 }
0DIDXCME:83: 	 // sendCommand를 이용하여 서버에 요청 보내고 결과 받기
0DRHNEPA:84: 	 public List<DepartmentDto> findAllDepartments () throws SQLException{
0YWMRWDG:85: 	  sendCommand(HRMRequest.findAllDepartments);
0TSQIRNY:86: 	  int response = getResponse();
0TWVPAGE:87: 	  if (response < 0){
0XFIVIBV:88: 	     System.err.println("Protocol error: findAllDepartments");
0DLWTPUT:89: 	     throw new SQLException("Protocol error: findAllDepartments");
0RDLQHRB:90: 	  }
0NAXCDME:91: 	  return (List<DepartmentDto>)cmndObj.getResult().get(0);
0SCDVUXR:92: 	 }
0BTAWNBZ:93: 	 public  List<EmployeeDto> findAllEmployees ()  throws SQLException{
0AUTMTBC:94: 	  sendCommand(HRMRequest.findAllEmployees);
0GRVAEZV:95: 	  int response = getResponse();
0EVPHPZC:96: 	  if (response < 0){
0VABVDBU:97: 	     System.err.println("Protocol error: findAllEmployees");
0MBKYBGJ:98: 	     throw new SQLException("Protocol error: findAllEmployees");
0OVTTVPM:99: 	  }
ENIVBWB:100: 	  return (List<EmployeeDto>)cmndObj.getResult().get(0);
VYTEWNI:101: 	 }
ZUZMFEY:102: 	 public  List<EmployeeDto> findTreeManagerInEmployee ()  throws SQLException{
JSHEUAP:103: 	  sendCommand(HRMRequest.findTreeManagerInEmployee);
SXLATIT:104: 	  int response = getResponse();
QZKFTGB:105: 	  if (response < 0){
WAVQSQC:106: 	     System.err.println("Protocol error: findTreeManagerInEmployee");
HPDOEFM:107: 	     throw new SQLException("Protocol error: findTreeManagerInEmployee");
MINNETW:108: 	  }
CQXBTQY:109: 	  return (List<EmployeeDto>)cmndObj.getResult().get(0);
ZZNCSRT:110: 	 }
NHUVHNL:111: 	 public  int getTreeMaxLevel () throws SQLException {
ZBJWGEF:112: 	  sendCommand(HRMRequest.getTreeMaxLevel);
CMACBTE:113: 	  int response = getResponse();
ACYXCBI:114: 	  if (response < 0){
EXQTYHS:115: 	     System.err.println("Protocol error: getTreeMaxLevel");
VYYRKGS:116: 	     throw new SQLException("Protocol error: getTreeMaxLevel");
EMJHVPI:117: 	  }
NUWBESJ:118: 	  return (int)cmndObj.getResult().get(0);
KSYOVSI:119: 	 }
VZRFUYJ:120: 	 public  List<DepCountDto> findAllDepCounts () throws SQLException{
WARUKDX:121: 	  sendCommand(HRMRequest.findAllDepCounts);
QITOWZL:122: 	  int response = getResponse();
SQHYMMD:123: 	  if (response < 0){
LRAZGPX:124: 	     System.err.println("Protocol error: findAllDepCounts");
CBCKYIZ:125: 	     throw new SQLException("Protocol error: findAllDepCounts");
KIUURTX:126: 	  }
PYXIWKL:127: 	  return (List<DepCountDto>)cmndObj.getResult().get(0);
XZCMSIJ:128: 	 }
VPWGKFA:129: 	 public  List<EmployeeDto>
CXBHOIL:130: 	   findEmployeesByDepartName(String val) throws SQLException{
SQCBQCU:131: 	  sendCommand(HRMRequest.findEmployeesByDepartName, val);
MYCADCX:132: 	  int response = getResponse();
PONXQJR:133: 	  if (response < 0){
ENVHJDM:134: 	     System.err.println("Protocol error: findEmployeesByDepartName");
KCPIXMN:135: 	     throw new SQLException("Protocol error: findEmployeesByDepartName");
QJDRHQY:136: 	  }
KFYXWIG:137: 	  return (List<EmployeeDto>)cmndObj.getResult().get(0);
JBCWANC:138: 	 }
CKAAVCG:139: 	 public List<EmployeeDto>
RSQQJAI:140: 	          findEmployeesByEmpId(String val) throws SQLException{
OOCNZTH:141: 	  sendCommand(HRMRequest.findEmployeesByEmpId,val);
USFKDCF:142: 	  int response = getResponse();
RWWUMSI:143: 	  if (response < 0){
HBHUNPK:144: 	     System.err.println("Protocol error: findEmployeesByEmpId");
WUGCSRR:145: 	     throw new SQLException("Protocol error: findEmployeesByEmpId");
CRJMRSQ:146: 	  }
HYUEXNS:147: 	  return (List<EmployeeDto>)cmndObj.getResult().get(0);
WCUWLNN:148: 	 }
WBHBVZQ:149: 	 public EmployeeDto findEmployeeById(String val) throws SQLException{
TEHMXPF:150: 	  sendCommand(HRMRequest.findEmployeeById,val);
YHBAGKU:151: 	  int response = getResponse();
VJDXXBP:152: 	  if (response < 0){
IYZSHRF:153: 	     System.err.println("Protocol error: findEmployeeById");
JBKGNLK:154: 	     throw new SQLException("Protocol error: findEmployeeById");
DAKONGN:155: 	  }
CBOPVLH:156: 	  return (EmployeeDto)cmndObj.getResult().get(0);
ZKKSMLE:157: 	 }
UYZRSGZ:158: 	 public List<EmployeeDto>
LPNEXBJ:159: 	     findManagersByName(String searchname) throws SQLException{
GKOGJEA:160: 	  sendCommand(HRMRequest.findManagersByName,searchname);
FMEOMUA:161: 	  int response = getResponse();
ZATSHSZ:162: 	  if (response < 0){
EPSWGGN:163: 	     System.err.println("Protocol error: findManagersByName");
BABGERX:164: 	     throw new SQLException("Protocol error: findManagersByName");
IVLEAQN:165: 	  }
RNDEIEW:166: 	  return (List<EmployeeDto>)cmndObj.getResult().get(0);
CEXMRID:167: 	 }
WXZQPPO:168: 	 public List<String> findAllJobs() throws SQLException{
RMCVWEI:169: 	  sendCommand(HRMRequest.findAllJobs);
UVRMXGP:170: 	  int response = getResponse();
VFWZJIJ:171: 	  if (response < 0){
KRANQNT:172: 	     System.err.println("Protocol error: findAllJobs");
YRPSIET:173: 	     throw new SQLException("Protocol error: findAllJobs");
UQOQIQV:174: 	  }
CGMAKJH:175: 	  return (List<String>)cmndObj.getResult().get(0);
YALTOAR:176: 	 }
QUAVYGL:177: 	 public List<DepartmentDto>
SKDQYNI:178: 	                    findAllDepartments2() throws SQLException{
JAPMVKC:179: 	  sendCommand(HRMRequest.findAllDepartments2);
RQPUBZS:180: 	  int response = getResponse();
GXFCBVJ:181: 	  if (response < 0){
HGRYYVP:182: 	     System.err.println("Protocol error: findAllDepartments2");
JGJJOEL:183: 	     throw new SQLException("Protocol error: findAllDepartments2");
YYYBQPW:184: 	  }
BHHXBQR:185: 	  return (List<DepartmentDto>)cmndObj.getResult().get(0);
WQKNJHW:186: 	 }
PIUWPEM:187: 	 public int addEmployee(EmployeeDto empdto) throws SQLException{
JQIPEML:188: 	  sendCommand(HRMRequest.addEmployee,empdto);
BHKAMIC:189: 	  int response = getResponse();
TOYKSHY:190: 	  if (response < 0){
ODYVEVC:191: 	     System.err.println("Protocol error: addEmployee");
QQWFCKJ:192: 	     throw new SQLException("Protocol error: addEmployee");
FCGZHGG:193: 	  }
IOKIXWL:194: 	  return (int)cmndObj.getResult().get(0);
ZUGHSII:195: 	 }
FXBCYCK:196: 	 public boolean updateEmployee(EmployeeDto emp) throws SQLException{
NOVRQSS:197: 	  sendCommand(HRMRequest.updateEmployee, emp);
RLEBGVS:198: 	  int response = getResponse();
SYVGRXT:199: 	  if (response < 0){
BZBFGKP:200: 	     System.err.println("Protocol error: updateEmployee");
XFHYLAT:201: 	     throw new SQLException("Protocol error: updateEmployee");
RULYNWU:202: 	  }
IRDANKA:203: 	  return (boolean)cmndObj.getResult().get(0);
ZZBAKOH:204: 	 }
AZAXCBA:205: 	 public boolean deleteEmployee(EmployeeDto emp) throws SQLException{
SEDWFAI:206: 	  sendCommand(HRMRequest.deleteEmployee,emp);
KZBWVMZ:207: 	  int response = getResponse();
DBQRQJV:208: 	  if (response < 0){
FGGUMPQ:209: 	     System.err.println("Protocol error: deleteEmployee");
BRRDVVB:210: 	     throw new SQLException("Protocol error: deleteEmployee");
CJRVGBE:211: 	  }
EWEGWRE:212: 	  return (boolean)cmndObj.getResult().get(0);
IUDVNUQ:213: 	 }
ZNFPSLO:214: 	 public int getEmployeesTotal() throws SQLException{
AWETECO:215: 	  sendCommand(HRMRequest.getEmployeesTotal);
TGSHUUL:216: 	  int response = getResponse();
EAXHGHJ:217: 	  if (response < 0){
FTIZMXU:218: 	     System.err.println("Protocol error: getEmployeesTotal");
PWKWDRC:219: 	     throw new SQLException("Protocol error: getEmployeesTotal");
ZSVBZQA:220: 	  }
LPJBSNN:221: 	  return (int)cmndObj.getResult().get(0);
ENLKCKP:222: 	 }
VQZTOMX:223: 	}
